<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.hnie.blogbackstage.mybatis.mapper.BlogMapper">
    <resultMap type="com.hnie.blogbackstage.mybatis.entity.Blog" id="blogMap">
        <id property="id" column="b_id"/>
        <result property="title" column="b_title"/>
        <result property="content" column="b_content"/>
        <result property="firstPicture" column="b_firstPicture"/>
        <result property="view" column="b_view"/>
        <result property="commentCount" column="b_commentCount"/>
        <result property="appreciation" column="b_appreciation"/>
        <result property="shareStatement" column="b_shareStatement"/>
        <result property="commentabled" column="b_commentabled"/>
        <result property="published" column="b_published"/>
        <result property="recommend" column="b_recommend"/>
        <result property="createTime" column="b_createTime"/>
        <result property="updateTime" column="b_updateTime"/>
        <result property="flag" column="b_flag"/>
        <result property="description" column="b_description"/>
        <association property="type" column="typeId" javaType="com.hnie.blogbackstage.mybatis.entity.Type">
            <id property="id" column="ty_id"/>
            <result property="name" column="ty_name"/>
        </association>
        <association property="user" column="userId" javaType="com.hnie.blogbackstage.mybatis.entity.User">
            <id property="id" column="us_id"/>
            <result property="username" column="us_username"/>
            <result property="password" column="us_password"/>
            <result property="email" column="us_email"/>
            <result property="avatar" column="us_avatar"/>
            <result property="type" column="us_type"/>
            <result property="createTime" column="us_createTime"/>
            <result property="updateTime" column="us_updateTime"/>
        </association>
        <collection property="tags" ofType="com.hnie.blogbackstage.mybatis.entity.Tag">
            <id property="id" column="ta_id"/>
            <result property="name" column="ta_name"/>
        </collection>
    </resultMap>


    <select id="getBlogById" resultMap="blogMap">
        select b.id             as b_id,
               b.title          as b_title,
               b.content        as b_content,
               b.firstPicture   as b_firstPicture,
               b.view           as b_view,
               b.commentCount   as b_commentCount,
               b.appreciation   as b_appreciation,
               b.shareStatement as b_shareStatement,
               b.commentabled   as b_commentabled,
               b.published      as b_published,
               b.recommend      as b_recommend,
               b.createTime     as b_createTime,
               b.updateTime     as b_updateTime,
               b.flag           as b_flag,
               b.description    as b_description,
               b.typeId         as b_typeId,
               b.userId         as b_userId,
               bt.id            as bt_id,
               bt.blogId        as bt_blogId,
               bt.tagId         as bt_tagId,
               ta.id            as ta_id,
               ta.name          as ta_name,
               ty.id            as ty_id,
               ty.name          as ty_name,
               us.id            as us_id,
               us.username      as us_username,
               us.password      as us_password,
               us.email         as us_email,
               us.avatar        as us_avatar,
               us.type          as us_type,
               us.createTime    as us_createTime,
               us.updataTime    as us_updateTime
        from `blog` as b
                 left outer join `blog_tag` as bt on b.id = bt.blogId
                 left outer join `tag` as ta on ta.id = bt.tagId
                 left outer join `user` as us on us.id = b.userId
                 left outer join `type` as ty on ty.id = b.typeId
        where b.`id` = #{id}
    </select>

    <select id="getAllBlog" resultMap="blogMap">
        select b.id             as b_id,
               b.title          as b_title,
               b.content        as b_content,
               b.firstPicture   as b_firstPicture,
               b.view           as b_view,
               b.commentCount   as b_commentCount,
               b.appreciation   as b_appreciation,
               b.shareStatement as b_shareStatement,
               b.commentabled   as b_commentabled,
               b.published      as b_published,
               b.recommend      as b_recommend,
               b.createTime     as b_createTime,
               b.updateTime     as b_updateTime,
               b.flag           as b_flag,
               b.description    as b_description,
               b.typeId         as b_typeId,
               b.userId         as b_userId,
               ty.id            as ty_id,
               ty.name          as ty_name,
               us.id            as us_id,
               us.username      as us_username,
               us.password      as us_password,
               us.email         as us_email,
               us.avatar        as us_avatar,
               us.type          as us_type,
               us.createTime    as us_createTime,
               us.updataTime    as us_updateTime
        from `blog` as b
                 --    left outer join `blog_tag` as bt on b.id = bt.blogId
                 --    left outer join `tag` as ta on ta.id = bt.tagId
                 --    为避免collection与PageHelper造成blog数量不一致问题，不查询blog对应的tags
                 left outer join `user` as us on us.id = b.userId
                 left outer join `type` as ty on ty.id = b.typeId
    </select>

    <!--    条件查询-->
    <select id="getBlogByCondition" resultMap="blogMap">
        select b.id as b_id,
        b.title as b_title,
        b.content as b_content,
        b.firstPicture as b_firstPicture,
        b.view as b_view,
        b.commentCount as b_commentCount,
        b.appreciation as b_appreciation,
        b.shareStatement as b_shareStatement,
        b.commentabled as b_commentabled,
        b.published as b_published,
        b.recommend as b_recommend,
        b.createTime as b_createTime,
        b.updateTime as b_updateTime,
        b.flag as b_flag,
        b.description as b_description,
        b.typeId as b_typeId,
        b.userId as b_userId,
        ty.id as ty_id,
        ty.name as ty_name
        from `blog` as b
        -- left outer join `blog_tag` as bt on b.id = bt.blogId
        -- left outer join `tag` as ta on ta.id = bt.tagId
        -- 为避免collection与PageHelper造成blog数量不一致问题，不查询blog对应的tags
        inner join `type` as ty on ty.id = b.typeId
        where b.typeId=ty.id
        <if test="title!=null and title!=''">
            and b.`title`like CONCAT('%',#{title},'%')
        </if>
        <if test="type!=0">
            and ty.`id`=#{type}
        </if>
        <choose>
            <when test="recommend ==true">
                and b.`recommend`=true
            </when>
            <when test="recommend ==false">
                and b.`recommend` in (true,false)
            </when>
        </choose>
    </select>

    <insert id="addBlog" useGeneratedKeys="true" keyProperty="id" keyColumn="id"
            parameterType="com.hnie.blogbackstage.mybatis.entity.Blog">
        insert into `blog` (`title`, `content`, `firstPicture`, `view`, `commentCount`, `appreciation`,
                            `shareStatement`, `commentabled`,
                            `published`, `recommend`, `createTime`, `updateTime`, `flag`, `description`, `typeId`,
                            `userId`)
        values (#{title}, #{content}, #{firstPicture}, #{view}, #{commentCount}, #{appreciation},
                #{shareStatement}, #{commentabled}, #{published}, #{recommend}, #{createTime}, #{updateTime}, #{flag},
                #{description}, #{type.id}, #{user.id});
    </insert>

    <insert id="addBlogTag">
        insert into `blog_tag` (id,blogId,tagId) values
        <foreach collection="tags" item="tag" index="index" separator=",">
            (null,#{id},#{tag.id})
        </foreach>;
    </insert>

    <update id="updateBlog" parameterType="com.hnie.blogbackstage.mybatis.entity.Blog">
        update `blog`
        set `title`=#{title},
            `content`=#{content},
            `firstPicture`=#{firstPicture},
            `appreciation`=#{appreciation},
            `shareStatement`= #{shareStatement},
            `commentabled`=#{commentabled},
            `published`= #{published},
            `recommend`=#{recommend},
            `updateTime`=#{updateTime},
            `typeId`= #{type.id}
        where `id` = #{id};
    </update>

    <delete id="deleteBlogTag" parameterType="com.hnie.blogbackstage.mybatis.entity.Blog">
        delete
        from `blog_tag`
        where `blogId` = #{id};
    </delete>

    <delete id="deleteBlog">
        delete
        from `blog`
        where `id` = #{id};
    </delete>

    <select id="getBlogByTitle" resultMap="blogMap">
        select b.id             as b_id,
               b.title          as b_title,
               b.content        as b_content,
               b.firstPicture   as b_firstPicture,
               b.view           as b_view,
               b.commentCount   as b_commentCount,
               b.appreciation   as b_appreciation,
               b.shareStatement as b_shareStatement,
               b.commentabled   as b_commentabled,
               b.published      as b_published,
               b.recommend      as b_recommend,
               b.createTime     as b_createTime,
               b.updateTime     as b_updateTime,
               b.flag           as b_flag,
               b.description    as b_description,
               b.typeId         as b_typeId,
               b.userId         as b_userId,
               bt.id            as bt_id,
               bt.blogId        as bt_blogId,
               bt.tagId         as bt_tagId,
               ta.id            as ta_id,
               ta.name          as ta_name
        from `blog` as b
                 left outer join `blog_tag` as bt on b.id = bt.blogId
                 left outer join `tag` as ta on ta.id = bt.tagId
        where b.`title` = #{title}
    </select>


    <select id="getTagsLimit" resultMap="blogMap">
        select b.id             as b_id,
               b.title          as b_title,
               b.content        as b_content,
               b.firstPicture   as b_firstPicture,
               b.view           as b_view,
               b.commentCount   as b_commentCount,
               b.appreciation   as b_appreciation,
               b.shareStatement as b_shareStatement,
               b.commentabled   as b_commentabled,
               b.published      as b_published,
               b.recommend      as b_recommend,
               b.createTime     as b_createTime,
               b.updateTime     as b_updateTime,
               b.flag           as b_flag,
               b.description    as b_description,
               b.typeId         as b_typeId,
               b.userId         as b_userId,
               ty.id            as ty_id,
               ty.name          as ty_name,
               us.id            as us_id,
               us.username      as us_username,
               us.password      as us_password,
               us.email         as us_email,
               us.avatar        as us_avatar,
               us.type          as us_type,
               us.createTime    as us_createTime,
               us.updataTime    as us_updateTime
        from `blog` as b
                 --    left outer join `blog_tag` as bt on b.id = bt.blogId
                 --    left outer join `tag` as ta on ta.id = bt.tagId
                 --    为避免collection与PageHelper造成blog数量不一致问题，不查询blog对应的tags
                 left outer join `user` as us on us.id = b.userId
                 left outer join `type` as ty on ty.id = b.typeId
        order by b_updateTime limit 0,#{size}
    </select>

    <update id="updateViews" parameterType="long">
        update `blog` as b
        set b.view=b.view + 1
        where b.id = #{id}
    </update>

</mapper>